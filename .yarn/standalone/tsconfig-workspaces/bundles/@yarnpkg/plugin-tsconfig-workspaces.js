/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-tsconfig-workspaces",
factory: function (require) {
"use strict";var plugin=(()=>{var m=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var j=Object.prototype.hasOwnProperty;var w=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(s,a)=>(typeof require<"u"?require:s)[a]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var x=(t,s)=>{for(var a in s)m(t,a,{get:s[a],enumerable:!0})},I=(t,s,a,c)=>{if(s&&typeof s=="object"||typeof s=="function")for(let e of D(s))!j.call(t,e)&&e!==a&&m(t,e,{get:()=>s[e],enumerable:!(c=A(s,e))||c.enumerable});return t};var M=t=>I(m({},"__esModule",{value:!0}),t);var U={};x(U,{default:()=>d});var o=w("@yarnpkg/core"),i=w("@yarnpkg/fslib"),d={hooks:{async afterAllInstalled(t,{report:s}){await s.startTimerPromise("Sync workspaces",async()=>{let a=i.ppath.join(t.cwd,"tsconfig.json");if(!await i.xfs.existsPromise(a))return;let c=i.ppath.join(t.cwd,".yarn","artifacts");await i.xfs.existsPromise(c)||await i.xfs.mkdirPromise(c);let e=t.workspaces.filter(r=>r.cwd!==t.cwd&&r.manifest.name?.scope!=="private");try{let r=await i.xfs.readFilePromise(a,"utf8").then(JSON.parse);if(!t.tryWorkspaceByCwd(t.cwd))return;let l=Object.keys(r.compilerOptions.paths??{});r.compilerOptions.paths={};let{paths:f}=r.compilerOptions,y=[];e.forEach(({relativeCwd:n,manifest:{name:g,main:S,raw:{exports:P={}}}})=>{if(g){let p=o.structUtils.stringifyIdent(g);f[p]=[n];let N=Object.entries(P);l.includes(p)||y.push(p),N.forEach(([k,E])=>{let O=`${p}/${k.replaceAll("./","")}`;f[O]=[i.ppath.join(n,E)]})}});let u=Object.keys(f),h=l.filter(n=>!u.includes(n));y.forEach(n=>{s.reportInfo(o.MessageName.UNNAMED,o.formatUtils.pretty(t.configuration,`+ ${n}`,"ADDED"))}),h.forEach(n=>{s.reportInfo(o.MessageName.UNNAMED,o.formatUtils.pretty(t.configuration,`- ${n}`,"REMOVED"))}),await i.xfs.writeFilePromise(a,`${JSON.stringify(r,null,2)}
`)}catch(r){s.reportError(o.MessageName.UNNAMED,`\u041D\u0435 \u0443\u0434\u0430\u0451\u0442\u0441\u044F \u0440\u0430\u0441\u043F\u043E\u0437\u043D\u0430\u0442\u044C \u0444\u0430\u0439\u043B tsconfig.json. \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044C, \u0447\u0442\u043E \u043E\u043D \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0444\u043E\u0440\u043C\u0430\u0442\u0443 json. \u041D\u0430\u043F\u0440\u0438\u043C\u0435\u0440 \u043D\u0435 \u0441\u043E\u0434\u0435\u0440\u0436\u0438\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u044E\u0449\u0435\u0439 \u0437\u0430\u043F\u044F\u0442\u043E\u0439. ${r.message}`)}try{await i.xfs.writeFilePromise(i.ppath.join(c,"workspaces.json"),JSON.stringify(e.map(({manifest:r})=>o.structUtils.stringifyIdent(r.name))))}catch{s.reportError(o.MessageName.UNNAMED,"\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0441\u043E\u0437\u0434\u0430\u0442\u044C \u043A\u0430\u0440\u0442\u0443 \u0440\u0430\u0431\u043E\u0447\u0438\u0445 \u043F\u0440\u043E\u0441\u0442\u0440\u0430\u043D\u0441\u0442\u0432 \u0434\u043B\u044F NextJS")}})}}};return M(U);})();
return plugin;
}
};
